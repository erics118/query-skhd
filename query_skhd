#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const modifiers = [
    'cmd', 'lcmd', 'rcmd',
    'shift', 'lshift', 'rshift',
    'alt', 'lalt', 'ralt',
    'ctrl', 'lctrl', 'rctrl',
    'hyper', 'meh', 'fn'
];

const keycodes = [
    'return ',
    'tab', 'space', 'backspace',
    'escape', 'delete', 'home', 'end',
    'pageup', 'pagedown', 'insert',
    'left', 'right', 'up', 'down',
    'f1', 'f2', 'f3', 'f4', 'f5',
    'f6', 'f7', 'f8', 'f9', 'f10',
    'f11', 'f12', 'f13', 'f14', 'f15',
    'f16', 'f17', 'f18', 'f19', 'f20',
    'sound_up', 'sound_down',
    'mute', 'play', 'previous',
    'next', 'rewind', 'fast',
    'brightness_up', 'brightness_down',
    'illumination_up', 'illumination_down',
    'a', 'b', 'c', 'd', 'e', 'f', 'g',
    'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u',
    'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4',
    '5', '6', '7', '8', '9'
];

function parse(argv, config) {
    argv = argv.join(' ').replace(/(=| +)/g, ' ').split(' ');
    const obj = {};
    argv.forEach((i, n) => {
        if (i.startsWith('--')) {
            i = i.substring(2);
            if (config.long.includes(i + ':'))
                obj[i] = argv[n + 1].toString();
            else if (config.long.includes(i))
                obj[i] = true;
        } else if (i.startsWith('-') && i.length === 2) {
            i = i.substring(1);
            if (config.short.includes(i + ':'))
                obj[i] = argv[n + 1].toString();
            else if (config.short.includes(i))
                obj[i] = true;
        }
    });
    return obj;
}

function omit(obj, omitKey) {
    return Object.keys(obj).reduce((result, key) => {
        if (key !== omitKey) result[key] = obj[key];
        return result;
    }, {});
}

/**
 * Checks if a string is a keycode.
 * @param {string} kc - The string to check.
 * @returns {string} - Whether or not the string is a keycode.
 */
function isKeycode(kc) {
    return keycodes.includes(kc) || /0x[0-9A-F]{2}/.test(kc);
}

/**
 * Checks if a string is a modifier.
 * @param {string} mod - The string to check.
 * @returns {string} - Whether or not the string is a modifier.
 */
function isModifier(mod) {
    return modifiers.includes(mod);
}

/**
 * Get the contents of a file.
 * @param {string} filePath - The path of the file.
 * @returns {string} - The file contents.
 */
function getFile(filePath) {
    return fs.readFileSync(filePath, 'utf8');
}

/**
 * Gets the skhd config location.
 * @throws {Error} If the skhd config file cannot be found.
 */
function getConfigLocation() {
    // skhd config locations
    const locations = [
        `${process.env.XDG_CONFIG_HOME}/skhd/skhdrc`,
        `${process.env.HOME}/.config/skhd/skhdrc`,
        `${process.env.HOME}/.skhdrc`
    ];

    for (const location of locations)
        if (fs.existsSync(location))
            return location;

    throw new Error("No skhd config location found.");
}

/**
 * Validates a shortcut.
 * @param {string} shortcut - The shortcut to validate.
 * @returns {boolean} Whether or not the shortcut is valid.
 */
function checkShortcut(shortcut) {
    // pad for spaces to split
    shortcut = shortcut.replace(/\+/g, ' + ').replace(/\-/g, ' - ');
    const parts = shortcut.split(/[\s]+/).filter(s => s);
    // just a single keycode
    if (parts.length === 1 && isKeycode(parts[0])) return true;
    let i = 0;
    while (i < parts.length && (isModifier(parts[i]) || parts[i] == '+')) ++i;
    // remaining should be `-` then a keycode
    if (i !== parts.length - 2) return false;
    // last one should be a keycode
    if (isKeycode(parts[++i])) return true;
    return false;
}

/**
 * Parses a shortcut.
 * @param {string} shortcut - The shortcut to parse.
 * @returns {object} - The parsed shortcut.
 */
function parseShortcut(shortcut) {
    // must be a valid shortcut, otherwise may have error
    shortcut = shortcut.replace(/\+/g, ' + ').replace(/\-/g, ' - ');
    const parts = shortcut.split(/[\s]+/).filter(s => !['', '-', '+'].includes(s));
    const res = { keycode: '', modifiers: [] };
    res.keycode = parts.splice(-1); // chop off last part and use as keycode
    for (let i = 0; i < parts.length; ++i) {
        if (parts[i] === 'hyper') res.modifiers.push('cmd', 'shift', 'alt', 'ctrl');
        else if (parts[i] === 'meh') res.modifiers.push('shift', 'alt', 'ctrl');
        else res.modifiers.push(parts[i]);
    }
    res.modifiers = [...new Set(res.modifiers)];
    return res;
}

/**
 * Parses the config file.
 * @param {string} filePath - The path of the config file.
 * @returns {object} - The config object.
 */
function parseConfig(filePath) {
    const fileData = getFile(filePath);
    const lines = fileData.split('\n');

    // define regexes to use
    const shortcutRegex = /^((?<mode>\w+)[ \t]*<[ \t]*)?(?<shortcut>[ \t\w\-\+]+)(?<modifier>->[ \t]*)?:(?<script>.*?)[ \t]*(#(?<comment>.*))?$/;
    const modeDefinitionRegex = /^::[ \t]*(?<mode>\w+)[ \t]*(?<modifier>@[ \t]*)?:[ \t]*(?<script>.*?)[ \t]*(#(?<comment>.*))?$/;
    const switchModeRegex = /^((?<mode>\w+)[ \t]*<[ \t]*)?(?<shortcut>[ \t\w\-\+]+)(?<modifier>->[ \t]*)?;[ \t]*(?<switchMode>\w+?)[ \t]*(#(?<comment>.*))?$/;

    // result structure
    const res = { loadFiles: [], shortcuts: [], modeDefinitions: [], switchModes: [] };

    for (const line of lines) {
        if (line.startsWith('#')) {
            // comment
            continue;
        } else if (line.startsWith('.load')) {
            // load directive
            res.loadFiles.push(path.dirname(filePath) + '/' + line.match(/\".*\"/)[0].slice(1, -1));
        } else if (line.startsWith('.blacklist')) {
            // blacklist directive
            continue; // TODO
        } else if (shortcutRegex.test(line)) {
            // shortcut definition
            const match = line.match(shortcutRegex);
            if (checkShortcut(match.groups.shortcut) && match.groups.script)
                res.shortcuts.push({
                    mode: (match.groups.mode ?? 'default').trim(),
                    shortcut: parseShortcut(match.groups.shortcut.trim()),
                    passThrough: ((match.groups.modifier ?? '').trim() === '->'),
                    script: match.groups.script.trim(),
                    comment: (match.groups.comment ?? '').trim()
                });
        } else if (modeDefinitionRegex.test(line)) {
            // mode definition
            const match = line.match(modeDefinitionRegex);
            if (match.groups.mode && match.groups.script)
                res.modeDefinitions.push({
                    mode: match.groups.mode.trim(),
                    captureAll: ((match.groups.modifier ?? '').trim() == '@'),
                    script: match.groups.script.trim(),
                    comment: (match.groups.comment ?? '').trim()
                });
        } else if (switchModeRegex.test(line)) {
            // mode shortcut definition
            const match = line.match(switchModeRegex);
            if (checkShortcut(match.groups.shortcut) && match.groups.switchMode)
                res.switchModes.push({
                    mode: (match.groups.mode ?? 'default').trim(),
                    shortcut: parseShortcut(match.groups.shortcut.trim()),
                    passThrough: ((match.groups.modifier ?? '').trim() === '->'),
                    switchMode: match.groups.switchMode.trim(),
                    comment: (match.groups.comment ?? '').trim()
                });
        }
    }
    return res;
}

/**
 * Recursively parses the config.
 * @param {string} filePath - The path of the config file.
 * @param {number} depth - The depth to recurse for the `.load` directive.
 * @returns {object} - The config object.
 */
function getConfig(filePath, depth) {
    const config = parseConfig(filePath);
    const res = config;
    const loadedFiles = [filePath];

    while (depth > 0) {
        --depth;
        for (const loadFile of config.loadFiles) {
            if (loadedFiles.includes(loadFile)) continue;
            loadedFiles.push(loadFile);
            const newConfig = parseConfig(loadFile);
            res.loadFiles = [...res.loadFiles, ...newConfig.loadFiles];
            res.shortcuts = [...res.shortcuts, ...newConfig.shortcuts];
            res.modeDefinitions = [...res.modeDefinitions, ...newConfig.modeDefinitions];
            res.switchModes = [...res.switchModes, ...newConfig.switchModes];
        }
    }
    return res;
}

function prettyPrintShortcut(shortcut) {
    let res = '';
    for (const modifier of shortcut.modifiers) {
        if (modifier.startsWith('l')) res += 'l';
        if (modifier.startsWith('r')) res += 'r';
        if (['cmd', 'lcmd', 'rcmd'].includes(modifier)) res += '⌘';
        else if (['shift', 'lshift', 'rshift'].includes(modifier)) res += '⇧';
        else if (['alt', 'lalt', 'ralt'].includes(modifier)) res += '⌥';
        else if (['ctrl', 'lctrl', 'rctrl'].includes(modifier)) res += '⌃';
    }
    res += shortcut.keycode;
    return res;
}

function prettyPrintConfig(config, forceScript) {
    const pretty = {};
    const modes = [...new Set(config.modeDefinitions.map(m => m.mode)), 'default'].sort();
    for (const mode of modes)
        pretty[mode] = { shortcuts: [], modeDefinition: '', switchModes: [] };

    for (const shortcut of config.shortcuts)
        if (modes.includes(shortcut.mode))
            pretty[shortcut.mode].shortcuts.push(omit(shortcut, 'mode'));

    for (const switchMode of config.switchModes)
        if (modes.includes(switchMode.mode))
            pretty[switchMode.mode].switchModes.push(omit(switchMode, 'mode'));

    for (const modeDefinition of config.modeDefinitions)
        if (modes.includes(modeDefinition.mode))
            pretty[modeDefinition.mode].modeDefinition = omit(modeDefinition, 'mode');

    for (const mode in pretty) {
        console.log(`${mode} ${pretty[mode].modeDefinition.captureAll ? '@' : ''}`);
        for (const switchMode of pretty[mode].switchModes)
            console.log(`    ${prettyPrintShortcut(switchMode.shortcut)} ${switchMode.passThrough ? '-> ' : ''}; switch to ${switchMode.switchMode} mode`);
        for (const shortcut of pretty[mode].shortcuts)
            console.log(`    ${prettyPrintShortcut(shortcut.shortcut)} ${shortcut.passThrough ? '-> ' : ''}: ${forceScript ? shortcut.script : shortcut.comment || shortcut.script}`);
    }
}

function getArgs() {
    const args = parse(process.argv.slice(2), {
        short: ['d:', 'p', 's'],
        long: ['depth:', 'pretty', 'script']
    });

    let depth = 1;
    let prettyPrint = false;
    let forceScript = false;

    for (let [k, v] of Object.entries(args)) {
        if (['d', 'depth'].includes(k) && parseInt(v) !== NaN) depth = parseInt(v);
        else if (['p', 'pretty'].includes(k)) prettyPrint = true;
        else if (['s', 'script'].includes(k)) forceScript = true;
    }
    return { depth, prettyPrint, forceScript };
}

const args = getArgs();
const configLocation = getConfigLocation();
const config = getConfig(configLocation, args.depth);

if (args.prettyPrint) prettyPrintConfig(config, args.forceScript);
else console.log(JSON.stringify(config, null, 4));
